#!/usr/bin/env nextflow
nextflow.enable.dsl=2



/* ========================================================================================
    OUTPUT DIRECTORY
======================================================================================== */
params.outdir = false

if(params.outdir){
    outdir = params.outdir
} else {
    outdir = '.'
}



/* ========================================================================================
    SKIP STEPS
======================================================================================== */
params.skip_qc           = false
params.skip_fastq_screen = false



/* ========================================================================================
    PARAMETERS
======================================================================================== */
params.genome       = ''
params.strand       = 'reverse' // default is reverse
params.verbose      = false
params.single_end   = false  // default mode is auto-detect. NOTE: params are handed over automatically  
params.help         = false
params.list_genomes = false

params.fastqc_args         = ''
params.fastq_screen_args   = ''
params.trim_galore_args    = ''
params.hisat2_args         = ''
params.featurecounts_args  = ''
params.multiqc_args        = ''
params.samtools_sort_args  = ''
params.samtools_index_args = ''



/* ========================================================================================
    MESSAGES
======================================================================================== */
// Show help message and exit
if (params.help){
    helpMessage()
    exit 0
}

// Validate strandedness
assert params.strand == 'forward' || params.strand == 'reverse' || params.strand == 'unstranded' || params.strand == 'smartseq2' : "Invalid strand orientation option: >>${params.strand}<<. Valid options are: 'forward', 'reverse', 'unstranded' or 'smartseq2'\n\n"
println ("Using strand orientation: " + params.strand)

if (params.list_genomes){
    println ("[WORKLFOW] List genomes selected")
}

if (params.verbose){
    println ("[WORKFLOW] FASTQC ARGS: "            + params.fastqc_args)
    println ("[WORKFLOW] FASTQ SCREEN ARGS ARE: "  + params.fastq_screen_args)
    println ("[WORKFLOW] TRIM GALORE ARGS: "       + params.trim_galore_args)
    println ("[WORKFLOW] HISAT2 ARGS ARE: "        + params.hisat2_args)
    println ("[WORKFLOW] SAMTOOLS SORT ARGS: "     + params.samtools_sort_args)
    println ("[WORKFLOW] SAMTOOLS INDEX ARGS: "    + params.samtools_index_args)
    println ("[WORKFLOW] FEATURECOUNTS ARGS ARE: " + params.featurecounts_args)
    println ("[WORKFLOW] MULTIQC ARGS: "           + params.multiqc_args)
}



/* ========================================================================================
    GENOMES
======================================================================================== */
include { getGenome; listGenomes } from './nf_modules/genomes.mod.nf'

if (params.list_genomes){
    listGenomes()
}
genome = getGenome(params.genome)



/* ========================================================================================
    FILES CHANNEL
======================================================================================== */
include { makeFilesChannel; getFileBaseNames } from './nf_modules/files.mod.nf'
file_ch = makeFilesChannel(args)



/* ========================================================================================
    WORKFLOW
======================================================================================== */
include { FASTQC }                     from './nf_modules/fastqc.mod.nf'
include { FASTQC as FASTQC2 }          from './nf_modules/fastqc.mod.nf'
include { FASTQ_SCREEN }               from './nf_modules/fastq_screen.mod.nf'
include { TRIM_GALORE }                from './nf_modules/trim_galore.mod.nf'
include { HISAT2 }                     from './nf_modules/hisat2.mod.nf'       params(genome: genome, bam_output: false)
include { SAMTOOLS_SORT }              from './nf_modules/samtools.mod.nf'
include { SAMTOOLS_INDEX }             from './nf_modules/samtools.mod.nf'
include { FEATURECOUNTS }              from './nf_modules/subread.mod.nf'      params(genome: genome, strand: params.strand)
include { FEATURECOUNTS_MERGE_COUNTS } from './nf_modules/subread.mod.nf'
include { MULTIQC }                    from './nf_modules/multiqc.mod.nf' 

workflow {

    main:

        // QC conditional
        if (!params.skip_qc){ 
            FASTQC                          (file_ch, outdir, params.fastqc_args, params.verbose)
            TRIM_GALORE                     (file_ch, outdir, params.trim_galore_args, params.verbose)
            // FastQ Screen conditional
            if (!params.skip_fastq_screen){ 
            FASTQ_SCREEN                    (TRIM_GALORE.out.reads, outdir, params.fastq_screen_args, params.verbose)
            }
            FASTQC2                         (TRIM_GALORE.out.reads, outdir, params.fastqc_args, params.verbose)
            HISAT2                          (TRIM_GALORE.out.reads, outdir, params.hisat2_args, params.verbose)
        } else {
            HISAT2                          (file_ch, outdir, params.hisat2_args, params.verbose)
        }

        SAMTOOLS_SORT               (HISAT2.out.bam, outdir, params.samtools_sort_args, params.verbose)
        SAMTOOLS_INDEX              (SAMTOOLS_SORT.out.bam, outdir, params.samtools_index_args, params.verbose)
        FEATURECOUNTS               (SAMTOOLS_SORT.out.bam, HISAT2.out.single_end, outdir, params.featurecounts_args, params.verbose)

        featurecounts_merge_counts_ch = FEATURECOUNTS.out.counts.collect()
        FEATURECOUNTS_MERGE_COUNTS  (featurecounts_merge_counts_ch, outdir, params.verbose)



        /* ========================================================================================
            Reports
        ======================================================================================== */

        // Merging channels for MultiQC
        if (!params.skip_qc){

            multiqc_ch = FASTQC.out.report.mix(
                         TRIM_GALORE.out.report,
                         FASTQC2.out.report.ifEmpty([])
                         ).collect()

            if (!params.skip_fastq_screen){
                multiqc_ch = multiqc_ch.mix(
                            FASTQ_SCREEN.out.report.ifEmpty([])
                            ).collect()
            }

        } else {

            multiqc_ch = HISAT2.out.stats.ifEmpty([])

        }

        multiqc_ch = multiqc_ch.mix(
                    FEATURECOUNTS.out.summary.ifEmpty([])
                    ).collect() 

        MULTIQC (multiqc_ch, outdir, params.multiqc_args, params.verbose)
}

workflow.onComplete {

    def msg = """\
        Pipeline execution summary
        ---------------------------
        Jobname     : ${workflow.runName}
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        Success     : ${workflow.success}
        workDir     : ${workflow.workDir}
        exit status : ${workflow.exitStatus}
        """
    .stripIndent()

    sendMail(to: "${workflow.userName}@ethz.ch", subject: 'Minimal pipeline execution report', body: msg)
}
