#!/usr/bin/env nextflow
nextflow.enable.dsl=2



/* ========================================================================================
    OUTPUT DIRECTORY
======================================================================================== */
params.outdir = false

if(params.outdir){
    outdir = params.outdir
} else {
    outdir = '.'
}



/* ========================================================================================
    SKIP STEPS
======================================================================================== */
params.skip_qc           = false
params.skip_fastq_screen = false



/* ========================================================================================
    PARAMETERS
======================================================================================== */
params.genome       = ''
params.verbose      = false
params.single_end   = false  // default mode is auto-detect. NOTE: params are handed over automatically 
params.help         = false
params.list_genomes = false

params.fastqc_args         = ''
params.fastq_screen_args   = ''
params.trim_galore_args    = ''
params.bowtie2_args        = ''
params.multiqc_args        = ''
params.samtools_sort_args  = ''
params.samtools_index_args = ''
params.macs_callpeak_args  = ''



/* ========================================================================================
    MESSAGES
======================================================================================== */
// Show help message and exit
if (params.help){
    helpMessage()
    exit 0
}

if (params.list_genomes){
    println ("[WORKLFOW] List genomes selected")
}

if (params.verbose){
    println ("[WORKFLOW] FASTQC ARGS: "           + params.fastqc_args)
    println ("[WORKFLOW] FASTQ SCREEN ARGS ARE: " + params.fastq_screen_args)
    println ("[WORKFLOW] TRIM GALORE ARGS: "      + params.trim_galore_args)
    println ("[WORKFLOW] BOWTIE2 ARGS: "          + params.bowtie2_args)
    println ("[WORKFLOW] SAMTOOLS SORT ARGS: "    + params.samtools_sort_args)
    println ("[WORKFLOW] SAMTOOLS INDEX ARGS: "   + params.samtools_index_args)
    println ("[WORKFLOW] MULTIQC ARGS: "          + params.multiqc_args)
}

// Validate peak caller
println ("Using peak caller: " + params.peak_caller)

if (params.verbose){
    println ("[WORKFLOW] MACS CALLPEAK ARGS: " + params.macs_callpeak_args)
}



/* ========================================================================================
    GENOMES
======================================================================================== */
include { getGenome; listGenomes } from './nf_modules/genomes.mod.nf'

if (params.list_genomes){
    listGenomes()
}
genome = getGenome(params.genome)



/* ========================================================================================
    FILES CHANNEL
======================================================================================== */
include { makeFilesChannel; getFileBaseNames } from './nf_modules/files.mod.nf'

// Loading the design csv file
if(args[0].endsWith('.csv')){

    Channel.fromPath(args)
    	   .splitCsv(header: true, sep: ',')
           .map { row -> [ file(row.treatment, checkIfExists: true), file(row.control, checkIfExists: true) ] }
           .set { files_ch }

} else {

    Channel.fromPath(args)
           .set { files_ch }

}


/* ========================================================================================
    WORKFLOW
======================================================================================== */
include { FASTQC }            from './nf_modules/fastqc.mod.nf'
include { FASTQC as FASTQC2 } from './nf_modules/fastqc.mod.nf'
include { FASTQ_SCREEN }      from './nf_modules/fastq_screen.mod.nf'
include { TRIM_GALORE }       from './nf_modules/trim_galore.mod.nf'
include { BOWTIE2 }           from './nf_modules/bowtie2.mod.nf'      params(genome: genome, bam_output: false)
include { SAMTOOLS_SORT }     from './nf_modules/samtools.mod.nf'
include { SAMTOOLS_INDEX }    from './nf_modules/samtools.mod.nf'
include { MACS_CALLPEAK }     from './nf_modules/macs.mod.nf'         params(genome: genome)
include { MULTIQC }           from './nf_modules/multiqc.mod.nf'

workflow {

    main:

        // QC conditional
        if (!params.skip_qc){ 
            FASTQC                          (file_ch, outdir, params.fastqc_args, params.verbose)
            TRIM_GALORE                     (file_ch, outdir, params.trim_galore_args, params.verbose)
            // FastQ Screen conditional
            if (!params.skip_fastq_screen){ 
            FASTQ_SCREEN                    (TRIM_GALORE.out.reads, outdir, params.fastq_screen_args, params.verbose)
            }
            FASTQC2                         (TRIM_GALORE.out.reads, outdir, params.fastqc_args, params.verbose)
            BOWTIE2                         (TRIM_GALORE.out.reads, outdir, params.bowtie2_args, params.verbose)
        } else {
            BOWTIE2                         (file_ch, outdir, params.bowtie2_args, params.verbose)
        }

        SAMTOOLS_SORT   (BOWTIE2.out.bam, outdir, params.samtools_sort_args, params.verbose)
        SAMTOOLS_INDEX  (SAMTOOLS_SORT.out.bam, outdir, params.samtools_index_args, params.verbose)
        MACS_CALLPEAK   (SAMTOOLS_SORT.out.bam, outdir, params.macs_callpeak_args, params.verbose)



        /* ========================================================================================
            Reports
        ======================================================================================== */

        // Merging channels for MultiQC
        if (!params.skip_qc){

            multiqc_ch = FASTQC.out.report.mix(
                         TRIM_GALORE.out.report,
                         FASTQC2.out.report.ifEmpty([])
                         ).collect()

            if (!params.skip_fastq_screen){
                multiqc_ch = multiqc_ch.mix(
                            FASTQ_SCREEN.out.report.ifEmpty([])
                            ).collect()
            }

        } else {

            multiqc_ch = BOWTIE2.out.stats.ifEmpty([])

        }

        multiqc_ch = multiqc_ch.mix(
                    //FEATURECOUNTS.out.summary.ifEmpty([])
                    ).collect() 

        MULTIQC (multiqc_ch, outdir, params.multiqc_args, params.verbose)

}

workflow.onComplete {

    def msg = """\
        Pipeline execution summary
        ---------------------------
        Jobname     : ${workflow.runName}
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        Success     : ${workflow.success}
        workDir     : ${workflow.workDir}
        exit status : ${workflow.exitStatus}
        """
    .stripIndent()

    sendMail(to: "${workflow.userName}@ethz.ch", subject: 'Minimal pipeline execution report', body: msg)
}
